package dataAccessTests;

import chess.ChessGame;
import dataAccess.*;
import exception.ResponseException;
import model.AuthData;
import model.GameData;
import model.UserData;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import service.Service;

import static org.junit.jupiter.api.Assertions.*;

public class DatabaseTests{

    //    static UserDAO myUserDAO = new MemoryUserDAO(); //change upon completion of SQL database
    static UserDAO myUserDAO = new MySqlUserDAO();

    //    static AuthDAO myAuthDAO = new MemoryAuthDAO();
    static AuthDAO myAuthDAO = new MySqlAuthDAO();

//    static GameDAO myGameDAO = new MemoryGameDAO();
    static GameDAO myGameDAO = new MySqlGameDAO();

    @BeforeEach
    void clear() throws ResponseException {
        Service.clear();
    }

    //game tests
    //  createGame
    //  getGame
    //  listGames
    //  updateGame
    //  clearGame
    @Test
    void createGameSuccess() {
        //create a game
        //using the returned games ID get the game
        //makes sure same dang game
        ChessGame testGame1 = new ChessGame();
        GameData testGame = new GameData(0, "white", null, "myGame1", testGame1);//GameID is ignored
        GameData returnedGame = myGameDAO.createGame(testGame);
        int returnedGameID = returnedGame.gameID();
        GameData verifyGame = myGameDAO.getGame(returnedGameID);
        assertEquals(returnedGame.gameID(), verifyGame.gameID());
    }

    @Test
    void createGameFailure() {
        ChessGame testGame1 = new ChessGame();
        GameData testGame = new GameData(125, "white", null, "myGame1", testGame1);//GameID is ignored
        GameData returnedGame = myGameDAO.createGame(testGame);
        int returnedGameID = returnedGame.gameID();

        assertNotEquals(125, returnedGameID); // make sure returned GameID is generated by createGame incr
    }

    @Test
    void getGameSuccess() {
        ChessGame testGame3 = new ChessGame();
        GameData testGame = new GameData(0, "white", null, "myGame3", testGame3);//GameID is ignored
        GameData returnedGame = myGameDAO.createGame(testGame);
        int returnedGameID = returnedGame.gameID();
        GameData verifyGame = myGameDAO.getGame(returnedGameID);
        assertEquals(returnedGame.gameID(), verifyGame.gameID());
    }

    @Test
    void getGameFailure() {
        ChessGame testGame3 = new ChessGame();
        GameData testGame = new GameData(0, "white", null, "myGame3", testGame3);//GameID is ignored
        GameData returnedGame = myGameDAO.createGame(testGame);
        int returnedGame3ID = returnedGame.gameID();

        ChessGame testGame4 = new ChessGame();
        GameData testGameData4 = new GameData(0, "white", null, "myGame4", testGame4);//GameID is ignored
        GameData returnedGame4 = myGameDAO.createGame(testGameData4);
        int returnedGame4ID = returnedGame4.gameID();

        GameData verifyGame3 = myGameDAO.getGame(returnedGame3ID); //can the first game be got after others added?
        GameData verifyGame4 = myGameDAO.getGame(returnedGame4ID);
        assertNotEquals(verifyGame3.gameID(), verifyGame4.gameID());
    }

    @Test
    void  listGamesSuccess() {
        ChessGame testGame = new ChessGame();
        GameData testGameData1 = new GameData(0, "white", null, "myGame", testGame);//GameID is ignored
        GameData returnedGame1 = myGameDAO.createGame(testGameData1);

        ChessGame testGame2 = new ChessGame();
        GameData testGameData2 = new GameData(0, "white", null, "myGame2", testGame2);//GameID is ignored
        GameData returnedGame2 = myGameDAO.createGame(testGameData2);

        var users = myGameDAO.listGames();
        assertEquals(2, users.size());
    }

    @Test
    void  listGamesFailure() {
        ChessGame testGame = new ChessGame();
        GameData testGameData1 = new GameData(0, "white", null, "myGame", testGame);//GameID is ignored
        GameData returnedGame1 = myGameDAO.createGame(testGameData1);

        ChessGame testGame2 = new ChessGame();
        GameData testGameData2 = new GameData(0, "white", null, "myGame2", testGame2);//GameID is ignored
        GameData returnedGame2 = myGameDAO.createGame(testGameData2);

        var users = myGameDAO.listGames();
        assertNotEquals(3, users.size());
    }

    @Test
    void updateGameSuccess() {
        ChessGame testGame = new ChessGame();
        GameData testGameData1 = new GameData(0, null, null, "myGame", testGame);//GameID is ignored
        GameData enteredGame1 = myGameDAO.createGame(testGameData1);

        GameData wantedUpdates = new GameData(enteredGame1.gameID(), "white", null, "myGame", testGame);
        GameData updatedGame1 = myGameDAO.updateGame(wantedUpdates);

        //assertEquals(enteredGame1.whiteUsername(), updatedGame1.whiteUsername());
        assertEquals("white", updatedGame1.whiteUsername());
    }

    @Test
    void updateGameFailure() {
        ChessGame testGame = new ChessGame();
        GameData testGameData1 = new GameData(0, null, null, "myGame", testGame);//GameID is ignored
        GameData enteredGame1 = myGameDAO.createGame(testGameData1);

        GameData wantedUpdates = new GameData(enteredGame1.gameID(), "white", null, "myGame", testGame);
        GameData updatedGame1 = myGameDAO.updateGame(wantedUpdates);

        //white username shouldn't be the same before and after, if truly updated
        assertNotEquals(enteredGame1.whiteUsername(), updatedGame1.whiteUsername());
    }

    @Test
    void clearGameSuccess() {
        ChessGame testGame1 = new ChessGame();
        GameData testGameData = new GameData(0, "white", null, "myGame3", testGame1);//GameID is ignored
        GameData returnedGame = myGameDAO.createGame(testGameData);

        var users = myGameDAO.listGames();
        assertEquals(1, users.size());

        ChessGame testGame2 = new ChessGame();
        GameData testGameData2 = new GameData(0, "white", null, "myGame3", testGame2);//GameID is ignored
        GameData returnedGame2 = myGameDAO.createGame(testGameData2);

        users = myGameDAO.listGames();
        assertEquals(2, users.size());

        myGameDAO.clearGame();
        users = myGameDAO.listGames();
        assertEquals(0, users.size());
    }

    //User Tests:
    //  getUser
    //  createUser
    //  clearUser
    //  passwordMatch
    @Test
    void getUserSuccess(){
        UserData testUser1 = new UserData("usernabe", "passwurb", "ebail");
        myUserDAO.createUser(testUser1);
        UserData returnedUser = myUserDAO.getUser(new UserData("usernabe", null, null));
        assertEquals(testUser1.email(), returnedUser.email());
    }


    @Test
    void getUserFailure(){
        UserData testUser1 = new UserData("usernabe", "passwurb", "ebail");
        myUserDAO.createUser(testUser1);
        UserData returnedUser = myUserDAO.getUser(new UserData("usernabe", null, null));
        assertEquals(testUser1.email(), returnedUser.email());
    }

    @Test
    void createUserSuccess(){
        UserData testUser1 = new UserData("usernabe", "passwurb", "ebail");
        myUserDAO.createUser(testUser1);
        UserData testUser2 = new UserData("usernamee", "passwurb", "ebail");
        myUserDAO.createUser(testUser2);

        UserData returnedUser1 = myUserDAO.getUser(new UserData("usernabe", null, null));
        UserData returnedUser2 = myUserDAO.getUser(new UserData("usernamee", null, null));
        assertEquals(returnedUser2.email(), returnedUser1.email()); //were both created? with correct emails for example?
    }

    @Test
    void createUserFailure(){
        UserData testUser3 = new UserData("usernabe", "passwurb", "ebail");
        myUserDAO.createUser(testUser3);

        UserData returnedUser4 = myUserDAO.getUser(new UserData("usernamee", null, null));
        assertEquals(null, returnedUser4); //were both created? user 4 should not be found
    }

    @Test
    void clearUserSuccess(){
        UserData testUser4 = new UserData("usernamee", "passwurb", "ebail");
        myUserDAO.createUser(testUser4);
        UserData testUser5 = new UserData("usernabe", "passwurb", "ebail");
        myUserDAO.createUser(testUser5);


        myUserDAO.clearUser();

        UserData returnedUser4 = myUserDAO.getUser(new UserData("usernamee", null, null));
        assertEquals(null, returnedUser4); //were both created? user 4 should not be found
    }

    @Test
    void passwordMatchSuccess(){
        UserData testUser4 = new UserData("usernamee", "samepasswurd", "ebail");
        myUserDAO.createUser(testUser4);

        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        String hashedPassword = encoder.encode(testUser4.password());

        Boolean match = myUserDAO.passwordMatch(hashedPassword, testUser4.password());
        assertTrue(match);
    }

    @Test
    void passwordMatchFailure(){
        UserData testUser5 = new UserData("usernabe", "samepassword", "ebail");
        myUserDAO.createUser(testUser5);

        Boolean match = myUserDAO.passwordMatch(testUser5.password(), "samepassword");
        assertFalse(match);

    }

    //Auth tests:
    //  createAuth
    //  getAuth
    //  deleteAuth
    //  clearAuth
    //  checkAuth

    @Test
    void createAuthSuccess() {
        UserData testauthUser = new UserData("usbe", "password", "email");
        AuthData testAuth = myAuthDAO.createAuth(testauthUser);
        assertNotEquals(null, testAuth);
    }

    @Test
    void createAuthFailure() {
        UserData badauthUser = new UserData(null, null, null); // put in bad user
        AuthData testAuth = myAuthDAO.createAuth(badauthUser);
        assertEquals(null, testAuth);
    }

    @Test
    void getAuthSuccess() {
        UserData testauthUser2 = new UserData("usbe", "password", "email");
        AuthData testAuth = myAuthDAO.createAuth(testauthUser2);
        AuthData returnedAuth = myAuthDAO.getAuth(testAuth.authToken());
        assertEquals(testAuth, returnedAuth);
    }
    @Test
    void getAuthFailure() {
        AuthData returnedAuth = myAuthDAO.getAuth("bogusAuthToken");
        assertNull(returnedAuth);
    }

    @Test
    void deleteAuthSuccess() {
        UserData testauthUser3 = new UserData("usbe", "password", "email");

        UserData testauthUser4 = new UserData("usbasdfe", "pasasfsword", "emafail");
        AuthData testAuth4 = myAuthDAO.createAuth(testauthUser4);

        myAuthDAO.deleteAuth(testAuth4);
        AuthData returnedAuth = myAuthDAO.getAuth(testAuth4.authToken());
        assertNull(returnedAuth);
    }

    @Test
    void deleteAuthFailure() {
        UserData testauthUser3 = new UserData("usbe", "password", "email");
        AuthData testAuth3 = myAuthDAO.createAuth(testauthUser3);


        myAuthDAO.deleteAuth(new AuthData("bogusauthToken", "bogususername"));
        AuthData returnedAuth = myAuthDAO.getAuth(testAuth3.authToken());
        assertNotNull(returnedAuth);
    }

    @Test
    void clearAuthSuccess() {
        UserData testauthUser5 = new UserData("usbe", "password", "email");
        AuthData testAuth5 = myAuthDAO.createAuth(testauthUser5);

        myAuthDAO.clearAuth();
        AuthData returnedAuth5 = myAuthDAO.getAuth(testAuth5.authToken());
        assertEquals(null, returnedAuth5);
    }

    @Test
    void checkAuthSuccess() {
        UserData testauthUser6 = new UserData("usbeasdf", "passwasdfafdord", "emaiasfafl");
        AuthData testAuth6 = myAuthDAO.createAuth(testauthUser6);

        assertTrue(myAuthDAO.checkAuth(testAuth6.authToken()));
    }

    @Test
    void checkAuthFailure() {
        assertFalse(myAuthDAO.checkAuth("bogusAuthToken")); //Should not return true for nonexistant Auth
    }
}
